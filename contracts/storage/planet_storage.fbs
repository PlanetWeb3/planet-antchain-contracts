// This file is auto generated by chainstack.
// You can add your own tables in this file.
// But please DO NOT modify the namespace, root type or the root type table name.
namespace planet.storage;

attribute "map";
attribute "map_iterable";

table Storage {
  owner: string;
  curTokenId: uint64 = 0;
  curItemId: uint64 = 0;
  addressToPLT: [PLT](map:"v2");
  tokenIdToURI: [TokenURL](map:"v2");
  addressToToken: [Tokens](map:"v2");
  addressToLastTime: [Time](map:"v2");
  commodities: [Commodity](map_iterable:"v2");
  sumWight: uint64 = 0;
  fee: uint64 = 1;
  K: uint64 = 5;
}
table Tokens {
  tokens: [Token](map_iterable:"v2");
}

table Token {
  tokenId: uint64;
  tokenURI: string;
  amount: uint64;
}

table Commodity {
  itemId: uint64;
  tokenId: uint64;
  tokenURI: string;
  owner: string;
  price: uint64;
  amount: uint64;
}

table Time {
  lastTime: uint64;
}

table TokenURL {
  url: string;
}

table PLT {
  plt: uint64;
}

// Down below is some sample mybuffer schema definitions,
// you can use these as the reference according to your actual scenario.
// NOTICE: if you are using mychain >= 2.19, we suggest use (map:"v2")/(map_iterable:"v2"), otherwise please use (map)/(map_iterable) instead.
// if you are upgrading from an older version to mychain 2.19+, please keep the field type as it is,
// table Transfer {
//     count:int = 1;                                   // define an integer type field and set default value to 1
//     accounts:[Account](map:"v2");                    // define a Map<String, Account> field, please notice that map is not iterable, which means you must have the key then you can get the value.
//     iterable_accounts:[Account](map_iterable:"v2");  // define a Map<String, Account> field, map_iterable can be iterated like normal map
// }

// table Account {
//     age:short = 18;           // define a short type field and set default value to 18
//     gender:short = 1;         // define a short type field and set default value to 1
//     create:int(deprecated);   // mark a field as deprecated
//     orders:[Order](map:"v2"); // define a Map<String, Order> field
//     banalce:Balance;          // define a field refers to another table
//     friends:[Friend];         // define an List<Friend> array
// }

// table Order {
//     id:string;      // define a string type field
//     sender:string;  // define a string type field
//     receive:string; // define a string type field
//     amount:int = 0; // define an integer type field with default value 0
// }

// table Balance {
//     rmb:int = 0; // define an integer type field with default value 0
//     usd:int = 0; // define an integer type field with default value 0
// }

// table Friend {
//     name:string; // define a string type field
//     age:int = 0; // define an integer type field with default value 0
// }

root_type Storage;