/*******************************************************************************
 * This file is auto generated by ChainStack, DO NOT MODIFY
 *
 * FileName : json_reader.h
 * Desc     : Json reader utils.
 * History  :
 * License  :
 *******************************************************************************/

#ifndef CSTACK_LIBS_COMMONS_JSON_READER_H
#define CSTACK_LIBS_COMMONS_JSON_READER_H

#include "dependency.h"
#include "error_code.h"

using namespace mychain;

namespace cstack {
namespace libs {
namespace commons {

    #define DEFAULT_STRING ""
    #define DEFAULT_NUMBER   0
    #define DEFAULT_BOOL   false

    class JsonReader {
    private:
        static bool is_number(const std::string &s) {
            return !s.empty() && std::find_if(s.begin(),
                                                s.end(), [](unsigned char c) { return !std::isdigit(c); }) == s.end();
        }

    public:
        static void ParseObject(const std::string &data, rapidjson::Value &value,
                                  bool isArray = false);

      static void ParseJsonValue(const std::string &data, rapidjson::Value &value);

      static void GetString(const rapidjson::Value::Object &object,
                            std::string field, std::string &dest);

      static void GetString(const rapidjson::Value &value, std::string &dest);

      static void GetUint64(const rapidjson::Value::Object &object,
                            std::string field, uint64_t &dest,
                            uint64_t default_value = DEFAULT_NUMBER);

      static void GetUint64(const rapidjson::Value &value, uint64_t &dest,
                            uint64_t default_value = DEFAULT_NUMBER);

      static void GetInt64(const rapidjson::Value &value, int64_t &dest,
                           int64_t default_value = DEFAULT_NUMBER);

      static void GetInt64(const rapidjson::Value::Object &object,
                           std::string field, int64_t &dest,
                           int64_t default_value = DEFAULT_NUMBER);

      static void GetUint32(const rapidjson::Value::Object &object,
                            std::string field, uint32_t &dest,
                            uint32_t default_value = DEFAULT_NUMBER);

      static void GetUint32(const rapidjson::Value &value, uint32_t &dest,
                            uint32_t default_value = DEFAULT_NUMBER);

      static void GetInt32(const rapidjson::Value::Object &object,
                           std::string field, int32_t &dest,
                           int32_t default_value = DEFAULT_NUMBER);

      static void GetInt32(const rapidjson::Value &value, int32_t &dest,
                           int32_t default_value = DEFAULT_NUMBER);

      static void GetUint16(const rapidjson::Value::Object &object,
                            std::string field, uint16_t &dest,
                            uint16_t default_value = DEFAULT_NUMBER);

      static void GetUint16(const rapidjson::Value &value, uint16_t &dest,
                            uint16_t default_value = DEFAULT_NUMBER);

      static void GetInt16(const rapidjson::Value::Object &object,
                           std::string field, int16_t &dest,
                           int16_t default_value = DEFAULT_NUMBER);

      static void GetInt16(const rapidjson::Value &value, int16_t &dest,
                           int16_t default_value = DEFAULT_NUMBER);

      static void GetUint8(const rapidjson::Value::Object &object,
                           std::string field, uint8_t &dest,
                           uint8_t default_value = DEFAULT_NUMBER);

      static void GetUint8(const rapidjson::Value &value, uint8_t &dest,
                           uint8_t default_value = DEFAULT_NUMBER);

      static void GetInt8(const rapidjson::Value::Object &object, std::string field,
                          int8_t &dest, int8_t default_value = DEFAULT_NUMBER);

      static void GetInt8(const rapidjson::Value &value, int8_t &dest,
                          int8_t default_value = DEFAULT_NUMBER);

      static void GetBool(const rapidjson::Value::Object &object, std::string field,
                          bool &dest, bool default_value = DEFAULT_BOOL);

      static void GetBool(const rapidjson::Value &value, bool &dest,
                          bool default_value = DEFAULT_BOOL);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<std::string> &dest);

      static void GetVector(const rapidjson::Value &value,
                            std::vector<std::string> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<uint64_t> &dest);

      static void GetVector(const rapidjson::Value &value,
                            std::vector<uint64_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<uint32_t> &dest);

      static void GetVector(const rapidjson::Value &value,
                            std::vector<uint32_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<uint16_t> &dest);

      static void GetVector(const rapidjson::Value &value,
                            std::vector<uint16_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<uint8_t> &dest);

      static void GetVector(const rapidjson::Value &value,
                            std::vector<uint8_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<int64_t> &dest);

      static void GetVector(const rapidjson::Value &value,
                            std::vector<int64_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<int32_t> &dest);

      static void GetVector(const rapidjson::Value &object,
                            std::vector<int32_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<int16_t> &dest);

      static void GetVector(const rapidjson::Value &object,
                            std::vector<int16_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<int8_t> &dest);

      static void GetVector(const rapidjson::Value &object,
                            std::vector<int8_t> &dest);

      static void GetVector(const rapidjson::Value::Object &object,
                            std::string field, std::vector<bool> &dest);

      static void GetVector(const rapidjson::Value &object,
                            std::vector<bool> &dest);

      static bool existNotNull(const rapidjson::Value::Object &object,
                               std::string field);

      static bool GetStringByJsonPath(const rapidjson::Value::Object &object,
                                      const std::string &json_path,
                                      std::string &dest);

      static bool GetUint64ByJsonPath(const rapidjson::Value::Object &object,
                                      const std::string &json_path, uint64_t &dest);

      static bool GetInt64ByJsonPath(const rapidjson::Value::Object &object,
                                     const std::string &json_path, int64_t &dest);

      static bool GetUint32ByJsonPath(const rapidjson::Value::Object &object,
                                      const std::string &json_path, uint32_t &dest);

      static bool GetInt32ByJsonPath(const rapidjson::Value::Object &object,
                                     const std::string &json_path, int32_t &dest);

      static bool GetUint16ByJsonPath(const rapidjson::Value::Object &object,
                                      const std::string &json_path, uint16_t &dest);

      static bool GetInt16ByJsonPath(const rapidjson::Value::Object &object,
                                     const std::string &json_path, int16_t &dest);

      static bool GetUint8ByJsonPath(const rapidjson::Value::Object &object,
                                     const std::string &json_path, uint8_t &dest);

      static bool GetInt8ByJsonPath(const rapidjson::Value::Object &object,
                                    const std::string &json_path, int8_t &dest);

      static bool GetBoolByJsonPath(const rapidjson::Value::Object &object,
                                    const std::string &json_path, bool &dest);

      static void SplitString(const std::string &s, const std::string &deliminator,
                              std::vector<std::string> &output);

      template <typename T>
      static void GetValue(const rapidjson::Value::Object &object,
                           const std::string &field, T &dest);

      template <typename T>
      static void GetValue(const rapidjson::Value &value, T &dest);

      template <typename T>
      static bool GetValueByJsonPath(const rapidjson::Value::Object &object,
                                     const std::string &json_path, T &dest);

      static bool GetValueByKey(rapidjson::Value &value,
                                const std::string &json_key);
    };

    void JsonReader::ParseObject(const std::string &data, rapidjson::Value &value,
                                 bool isArray) {
      static rapidjson::Document doc;
      doc.Parse(data.data());
      Require(!doc.HasParseError(),
              JSON_PARSE_ERROR(std::to_string(doc.GetParseError())));

      if (isArray) {
        Require(doc.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);
        value = doc.GetArray();
      } else {
        Require(doc.IsObject(), JSON_DECODE_ERROR_NOT_OBJECT);
        value = doc.GetObject();
      }
    }

    void JsonReader::ParseJsonValue(const std::string &data,
                                    rapidjson::Value &value) {
      static rapidjson::Document doc;
      doc.Parse(data.data());
      Require(!doc.HasParseError(),
              JSON_PARSE_ERROR(std::to_string(doc.GetParseError())));

      if (doc.IsArray()) {
        value = doc.GetArray();
      } else {
        value = doc.GetObject();
      }
    }

    void JsonReader::GetString(const rapidjson::Value::Object &object,
                               std::string field, std::string &dest) {
      GetString(object[field.data()], dest);
    }

    void JsonReader::GetString(const rapidjson::Value &value, std::string &dest) {
      if (value.IsNull()) {
        dest = std::string(DEFAULT_STRING);
      } else {
        Require(value.IsString(), JSON_DECODE_ERROR_NOT_STRING);
        dest = value.GetString();
      }
    }

    void JsonReader::GetUint64(const rapidjson::Value::Object &object,
                               std::string field, uint64_t &dest,
                               uint64_t default_value) {
      GetUint64(object[field.data()], dest, default_value);
    }

    void JsonReader::GetUint64(const rapidjson::Value &value, uint64_t &dest,
                               uint64_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsUint64(), JSON_DECODE_ERROR_NOT_UINT64);
        dest = (uint64_t)value.GetUint64();
      }
    }

    void JsonReader::GetInt64(const rapidjson::Value::Object &object,
                              std::string field, int64_t &dest,
                              int64_t default_value) {
      GetInt64(object[field.data()], dest, default_value);
    }

    void JsonReader::GetInt64(const rapidjson::Value &value, int64_t &dest,
                              int64_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsInt64(), JSON_DECODE_ERROR_NOT_INT64);
        dest = (int64_t)value.GetInt64();
      }
    }

    void JsonReader::GetUint32(const rapidjson::Value::Object &object,
                               std::string field, uint32_t &dest,
                               uint32_t default_value) {
      GetUint32(object[field.data()], dest, default_value);
    }

    void JsonReader::GetUint32(const rapidjson::Value &value, uint32_t &dest,
                               uint32_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsUint(), JSON_DECODE_ERROR_NOT_UINT32);
        unsigned result = value.GetUint();
        Require(result <= UINT_MAX, JSON_DECODE_ERROR_NUMBER_OVERFLOW);
        dest = (uint32_t)result;
      }
    }

    void JsonReader::GetInt32(const rapidjson::Value::Object &object,
                              std::string field, int32_t &dest,
                              int32_t default_value) {
      GetInt32(object[field.data()], dest, default_value);
    }

    void JsonReader::GetInt32(const rapidjson::Value &value, int32_t &dest,
                              int32_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsInt(), JSON_DECODE_ERROR_NOT_INT32);
        int result = value.GetInt();
        Require(result <= INT_MAX && result >= INT_MIN,
                JSON_DECODE_ERROR_NUMBER_OVERFLOW);
        dest = (int32_t)result;
      }
    }

    void JsonReader::GetUint16(const rapidjson::Value::Object &object,
                               std::string field, uint16_t &dest,
                               uint16_t default_value) {
      GetUint16(object[field.data()], dest, default_value);
    }

    void JsonReader::GetUint16(const rapidjson::Value &value, uint16_t &dest,
                               uint16_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsUint(), JSON_DECODE_ERROR_NOT_UINT16);
        unsigned result = value.GetUint();
        Require(result <= USHRT_MAX, JSON_DECODE_ERROR_NUMBER_OVERFLOW);
        dest = (uint16_t)result;
      }
    }

    void JsonReader::GetInt16(const rapidjson::Value::Object &object,
                              std::string field, int16_t &dest,
                              int16_t default_value) {
      GetInt16(object[field.data()], dest, default_value);
    }

    void JsonReader::GetInt16(const rapidjson::Value &value, int16_t &dest,
                              int16_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsInt(), JSON_DECODE_ERROR_NOT_INT16);
        int result = value.GetInt();
        Require(result <= SHRT_MAX && result >= SHRT_MIN,
                JSON_DECODE_ERROR_NUMBER_OVERFLOW);
        dest = (int16_t)result;
      }
    }

    void JsonReader::GetUint8(const rapidjson::Value::Object &object,
                              std::string field, uint8_t &dest,
                              uint8_t default_value) {
      GetUint8(object[field.data()], dest, default_value);
    }

    void JsonReader::GetUint8(const rapidjson::Value &value, uint8_t &dest,
                              uint8_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsUint(), JSON_DECODE_ERROR_NOT_UINT8);
        unsigned result = value.GetUint();
        Require(result <= UCHAR_MAX, JSON_DECODE_ERROR_NUMBER_OVERFLOW);
        dest = (uint8_t)result;
      }
    }

    void JsonReader::GetInt8(const rapidjson::Value::Object &object,
                             std::string field, int8_t &dest,
                             int8_t default_value) {
      GetInt8(object[field.data()], dest, default_value);
    }

    void JsonReader::GetInt8(const rapidjson::Value &value, int8_t &dest,
                             int8_t default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsInt(), JSON_DECODE_ERROR_NOT_INT8);
        int result = value.GetInt();
        Require(result <= SCHAR_MAX && result >= SCHAR_MIN,
                JSON_DECODE_ERROR_NUMBER_OVERFLOW);
        dest = (int8_t)result;
      }
    }

    void JsonReader::GetBool(const rapidjson::Value::Object &object,
                             std::string field, bool &dest, bool default_value) {
      GetBool(object[field.data()], dest, default_value);
    }

    void JsonReader::GetBool(const rapidjson::Value &value, bool &dest,
                             bool default_value) {
      if (value.IsNull()) {
        dest = default_value;
      } else {
        Require(value.IsBool(), JSON_DECODE_ERROR_NOT_BOOL);
        dest = value.GetBool();
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<std::string> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        if (v.IsNull()) {
          dest.push_back(DEFAULT_STRING);
        } else {
          std::string data;
          GetString(v, data);
          dest.push_back(data);
        }
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &value,
                               std::vector<std::string> &dest) {
      Require(value.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : value.GetArray()) {
        if (v.IsNull()) {
          dest.push_back(DEFAULT_STRING);
        } else {
          std::string data;
          GetString(v, data);
          dest.push_back(data);
        }
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<uint64_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        uint64_t data;
        GetUint64(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<uint64_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        uint64_t data;
        GetUint64(v, data);
        dest.push_back(v.GetUint64());
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<uint32_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        uint32_t data;
        GetUint32(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<uint32_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        uint32_t data;
        GetUint32(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<uint16_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        uint16_t data;
        GetUint16(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<uint16_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        uint16_t data;
        GetUint16(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<uint8_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        uint8_t data;
        GetUint8(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<uint8_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        uint8_t data;
        GetUint8(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<int64_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        int64_t data;
        GetInt64(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<int64_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        int64_t data;
        GetInt64(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<int32_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        int32_t data;
        GetInt32(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<int32_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        int32_t data;
        GetInt32(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<int16_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        int16_t data;
        GetInt16(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<int16_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        int16_t data;
        GetInt16(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<int8_t> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        int8_t data;
        GetInt8(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<int8_t> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        int8_t data;
        GetInt8(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value::Object &object,
                               std::string field, std::vector<bool> &dest) {
      Require(object[field.data()].IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object[field.data()].GetArray()) {
        bool data;
        GetBool(v, data);
        dest.push_back(data);
      }
    }

    void JsonReader::GetVector(const rapidjson::Value &object,
                               std::vector<bool> &dest) {
      Require(object.IsArray(), JSON_DECODE_ERROR_NOT_ARRAY);

      for (auto &v : object.GetArray()) {
        bool data;
        GetBool(v, data);
        dest.push_back(data);
      }
    }

    bool JsonReader::existNotNull(const rapidjson::Value::Object &object,
                                  std::string field) {
      return object.HasMember(field.data()) && !object[field.data()].IsNull();
    }

    void JsonReader::SplitString(const std::string &s, const std::string &delimiter,
                                 std::vector<std::string> &output) {
      size_t start;
      size_t end = 0;

      while ((start = s.find_first_not_of(delimiter, end)) != std::string::npos) {
        end = s.find(delimiter, start);
        output.push_back(s.substr(start, end - start));
      }
    }

    bool JsonReader::GetStringByJsonPath(const rapidjson::Value::Object &object,
                                         const std::string &json_path,
                                         std::string &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetUint64ByJsonPath(const rapidjson::Value::Object &object,
                                         const std::string &json_path,
                                         uint64_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetInt64ByJsonPath(const rapidjson::Value::Object &object,
                                        const std::string &json_path,
                                        int64_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetUint32ByJsonPath(const rapidjson::Value::Object &object,
                                         const std::string &json_path,
                                         uint32_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetInt32ByJsonPath(const rapidjson::Value::Object &object,
                                        const std::string &json_path,
                                        int32_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetUint16ByJsonPath(const rapidjson::Value::Object &object,
                                         const std::string &json_path,
                                         uint16_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetInt16ByJsonPath(const rapidjson::Value::Object &object,
                                        const std::string &json_path,
                                        int16_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetUint8ByJsonPath(const rapidjson::Value::Object &object,
                                        const std::string &json_path,
                                        uint8_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetInt8ByJsonPath(const rapidjson::Value::Object &object,
                                       const std::string &json_path, int8_t &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    bool JsonReader::GetBoolByJsonPath(const rapidjson::Value::Object &object,
                                       const std::string &json_path, bool &dest) {
      return GetValueByJsonPath(object, json_path, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, uint8_t &dest) {
      GetUint8(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, uint16_t &dest) {
      GetUint16(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, uint32_t &dest) {
      GetUint32(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, uint64_t &dest) {
      GetUint64(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, int8_t &dest) {
      GetInt8(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, int16_t &dest) {
      GetInt16(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, int32_t &dest) {
      GetInt32(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, int64_t &dest) {
      GetInt64(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, bool &dest) {
      GetBool(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value::Object &object,
                              const std::string &field, std::string &dest) {
      GetString(object, field, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, uint8_t &dest) {
      GetUint8(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, uint16_t &dest) {
      GetUint16(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, uint32_t &dest) {
      GetUint32(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, uint64_t &dest) {
      GetUint64(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, int8_t &dest) {
      GetInt8(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, int16_t &dest) {
      GetInt16(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, int32_t &dest) {
      GetInt32(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, int64_t &dest) {
      GetInt64(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, bool &dest) {
      GetBool(value, dest);
    }

    template <>
    void JsonReader::GetValue(const rapidjson::Value &value, std::string &dest) {
      GetString(value, dest);
    }

    bool JsonReader::GetValueByKey(rapidjson::Value &value,
                                   const std::string &json_key) {
      if (is_number(json_key) && value.IsArray()) {
        unsigned long index = std::stoul(json_key);
        if (index > value.Size() - 1) {
          return false;
        }
        rapidjson::Value::Array data_array = value.GetArray();
        value = data_array[index];
      } else {
        if (!value.IsObject() || !value.HasMember(json_key.data())) {
          return false;
        }
        rapidjson::Value::Object data_object = value.GetObject();
        value = data_object[json_key.data()];
      }
      return true;
    }

    template <typename T>
    bool JsonReader::GetValueByJsonPath(const rapidjson::Value::Object &object,
                                        const std::string &json_path, T &dest) {
      std::vector<std::string> path_list;
      SplitString(json_path, ".", path_list);
      if (path_list.empty() || !is_number(path_list[0]) ||
          !object.HasMember(path_list[0].data())) {
        return false;
      }
      if (path_list.size() == 1) {
        GetValue(object, path_list[0], dest);
        return true;
      }

      rapidjson::Value path_value;
      ParseJsonValue(object[path_list[0].data()].GetString(), path_value);

      for (unsigned int i = 1; i < path_list.size(); ++i) {
        std::string json_key = path_list.at(i);
        if (!GetValueByKey(path_value, json_key)) {
          return false;
        }
        if (i == path_list.size() - 1) {
          GetValue(path_value, dest);
          return true;
        }
      }
      return false;
    }
} // namespace commons
} // namespace libs
} // namespace cstack
#endif //CSTACK_LIBS_COMMONS_JSON_READER_H