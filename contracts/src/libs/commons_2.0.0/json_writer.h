/*******************************************************************************
 * This file is auto generated by ChainStack, DO NOT MODIFY
 *
 * FileName : json_writer.h
 * Desc     : Json writer utils.
 * History  :
 * License  :
 *******************************************************************************/

#ifndef CSTACK_LIBS_COMMONS_JSON_WRITER_H
#define CSTACK_LIBS_COMMONS_JSON_WRITER_H

#include "dependency.h"

namespace cstack {
namespace libs {
namespace commons {

class JsonWriter {
public:
    static void Writer(rapidjson::Value& json, std::string& data);
    static void ToValue(const std::string& data,
                      rapidjson::Document::AllocatorType& allocator,
                      rapidjson::Value& value);
    static void ToValue(const uint64_t& data, rapidjson::Value& value);
    static void ToValue(const int64_t& data, rapidjson::Value& value);
    static void ToValue(const uint32_t& data, rapidjson::Value& value);
    static void ToValue(const int32_t& data, rapidjson::Value& value);
    static void ToValue(const uint16_t& data, rapidjson::Value& value);
    static void ToValue(const int16_t& data, rapidjson::Value& value);
    static void ToValue(const uint8_t& data, rapidjson::Value& value);
    static void ToValue(const int8_t& data, rapidjson::Value& value);
    static void ToValue(const bool& data, rapidjson::Value& value);
};

void JsonWriter::Writer(rapidjson::Value& json, std::string& data) {
  rapidjson::StringBuffer buffer;
  rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
  json.Accept(writer);

  data = std::string(buffer.GetString());
}

void JsonWriter::ToValue(const std::string& data,
                         rapidjson::Document::AllocatorType& allocator,
                         rapidjson::Value& value) {
  value.SetString(data.c_str(), data.length(), allocator);
}

void JsonWriter::ToValue(const uint64_t& data, rapidjson::Value& value) {
  value.SetUint64(data);
}

void JsonWriter::ToValue(const int64_t& data, rapidjson::Value& value) {
  value.SetInt64(data);
}

void JsonWriter::ToValue(const uint32_t& data, rapidjson::Value& value) {
  value.SetUint(data);
}

void JsonWriter::ToValue(const int32_t& data, rapidjson::Value& value) {
  value.SetInt(data);
}

void JsonWriter::ToValue(const uint16_t& data, rapidjson::Value& value) {
  value.SetUint((uint32_t)data);
}

void JsonWriter::ToValue(const int16_t& data, rapidjson::Value& value) {
  value.SetInt((int32_t)data);
}

void JsonWriter::ToValue(const uint8_t& data, rapidjson::Value& value) {
  value.SetUint((uint32_t)data);
}

void JsonWriter::ToValue(const int8_t& data, rapidjson::Value& value) {
  value.SetInt((int32_t)data);
}

void JsonWriter::ToValue(const bool& data, rapidjson::Value& value) {
  value.SetBool(data);
}

} // namespace commons
} // namespace libs
} // namespace cstack
#endif //CSTACK_LIBS_COMMONS_JSON_WRITER_H