/*******************************************************************************
 * This file is auto generated by ChainStack, add your biz logic here
 *
 * FileName : planet_contract.hpp
 * Desc     : Planet controller instance, this file is generated for user to modify.
 * History  :
 * License  :
 *******************************************************************************/

#ifndef PLANET_CONTRACT_H
#define PLANET_CONTRACT_H

#include "generated/base/planet_contract_base.hpp"
#include "generated/model/planet_model.h"
#include "shared/error_code.h"

using namespace planet;

class PlanetContractImpl : public PlanetContractBase{
public:
    PlanetContractImpl() {
        // construct your service pointer here...
    }

    std::string GetOwner() {
        return GetStorage()->get_owner();
    }
    
    void MintNFT(const std::vector<std::string>& token_u_r_is, const std::vector<uint64_t>& amounts) {
        Require(token_u_r_is.size() == amounts.size(), "Length Mismatch");
        Require(Bin2Hex(GetSender().get_data()) == GetStorage()->get_owner(), "Only Owner");
        size_t size = token_u_r_is.size();
        uint64_t curTokenId = GetStorage()->get_curTokenId();
        auto addressToToken = GetStorage()->get_addressToToken();

        for (size_t i = 0; i < size; i++) {
            Require(amounts[i] >= 1, "Zero Amount");
            if (!(addressToToken->has_element(GetSelf().get_data()))) {
                addressToToken->add_element(GetSelf().get_data());
            }
            auto tokens = addressToToken->get_element(GetSelf().get_data())->get_tokens();
            auto token = tokens->add_element(std::to_string(curTokenId));
            token->set_tokenId(curTokenId);
            token->set_tokenURI(token_u_r_is[i]);
            token->set_amount(amounts[i]);
            curTokenId++;
        }

        GetStorage()->set_curTokenId(curTokenId);
    }

    std::vector<model::Token> GetNFT(const std::string& owner) {
        return {};    
    }
    // /**
    //  * @external_call true
    //  */
    //     model::HelloResponse Hello(
    //     const model::HelloRequest& request 
    // ) {
    // // you can print some test logs with built-in logger
    // LOGGER.Info("received call on interface Hello!");

    //     // return response
    //     return model::BuildHelloResponse();
    // }


private:
    // add your local var definitions here...
};

#endif //PLANET_CONTRACT_H