/*******************************************************************************
 * This file is auto generated by ChainStack, DO NOT MODIFY
 *
 * FileName : log.h
 * Desc     : Define contract data object.
 * History  :
 * License  :
 *******************************************************************************/

#ifndef CDL_PLANET_MODEL_H
#define CDL_PLANET_MODEL_H

#include "libs/commons_2.0.0/dependency.h"
#include "libs/commons_2.0.0/json_reader.h"
#include "libs/commons_2.0.0/json_writer.h"
#include "libs/commons_2.0.0/validator.h"

#define SF_NAME           "name"
#define SF_TOKEN_ID           "tokenId"
#define SF_TOKEN_U_R_I           "tokenURI"
#define SF_AMOUNT           "amount"
#define SF_GREETING           "greeting"

using cstack::libs::commons::JsonReader;
using cstack::libs::commons::JsonWriter;
using cstack::libs::commons::Validator;

namespace planet {
namespace model {

struct HelloRequest {

	std::string name;


    // name 字段是否存在
    bool name_exist = true;


    void set_name(const std::string& _value) {
        name = _value;
        name_exist = true;
    }

    std::string get_name() const {
        return name;
    }

    bool is_name_exist() const {
        return name_exist;
    }

};

struct Token {

	uint64_t token_id;

	std::string token_u_r_i;

	uint64_t amount;


    // token_id 字段是否存在
    bool token_id_exist = true;

    // token_u_r_i 字段是否存在
    bool token_u_r_i_exist = true;

    // amount 字段是否存在
    bool amount_exist = true;


    void set_token_id(const uint64_t& _value) {
        token_id = _value;
        token_id_exist = true;
    }

    uint64_t get_token_id() const {
        return token_id;
    }

    bool is_token_id_exist() const {
        return token_id_exist;
    }

    void set_token_u_r_i(const std::string& _value) {
        token_u_r_i = _value;
        token_u_r_i_exist = true;
    }

    std::string get_token_u_r_i() const {
        return token_u_r_i;
    }

    bool is_token_u_r_i_exist() const {
        return token_u_r_i_exist;
    }

    void set_amount(const uint64_t& _value) {
        amount = _value;
        amount_exist = true;
    }

    uint64_t get_amount() const {
        return amount;
    }

    bool is_amount_exist() const {
        return amount_exist;
    }

};

struct HelloResponse {

	std::string greeting;


    // greeting 字段是否存在
    bool greeting_exist = true;


    void set_greeting(const std::string& _value) {
        greeting = _value;
        greeting_exist = true;
    }

    std::string get_greeting() const {
        return greeting;
    }

    bool is_greeting_exist() const {
        return greeting_exist;
    }

};


HelloRequest BuildHelloRequest();
void HelloRequestJsonDecode(const std::string& data, HelloRequest& helloRequest);
void HelloRequestJsonDecode(const rapidjson::Value::Object& object, HelloRequest& helloRequest);
void HelloRequestJsonEncode(const HelloRequest& helloRequest, std::string& data);
void HelloRequestJsonEncode(const HelloRequest& helloRequest, rapidjson::Value& json, rapidjson::Document::AllocatorType& allocator);

Token BuildToken();
void TokenJsonDecode(const std::string& data, Token& token);
void TokenJsonDecode(const rapidjson::Value::Object& object, Token& token);
void TokenJsonEncode(const Token& token, std::string& data);
void TokenJsonEncode(const Token& token, rapidjson::Value& json, rapidjson::Document::AllocatorType& allocator);

HelloResponse BuildHelloResponse();
void HelloResponseJsonDecode(const std::string& data, HelloResponse& helloResponse);
void HelloResponseJsonDecode(const rapidjson::Value::Object& object, HelloResponse& helloResponse);
void HelloResponseJsonEncode(const HelloResponse& helloResponse, std::string& data);
void HelloResponseJsonEncode(const HelloResponse& helloResponse, rapidjson::Value& json, rapidjson::Document::AllocatorType& allocator);


//// HelloRequest Model Method Definition

HelloRequest BuildHelloRequest() {
    HelloRequest hello_request_model;
    hello_request_model.name_exist = false;
    return hello_request_model;
}

void HelloRequestJsonDecode(const std::string& data, HelloRequest& helloRequest){

    rapidjson::Value root;
	JsonReader::ParseObject(data, root);

	auto object = root.GetObject();

    HelloRequestJsonDecode(object, helloRequest);
}

void HelloRequestJsonDecode(const rapidjson::Value::Object& object, HelloRequest& helloRequest){
        Validator::RequiredFieldCheck(object, SF_NAME);
	    JsonReader::GetString(object, SF_NAME, helloRequest.name);

}

void HelloRequestJsonEncode(const HelloRequest& helloRequest, std::string& data){

    rapidjson::Value json(rapidjson::kObjectType);

    static rapidjson::Document doc;
	rapidjson::Document::AllocatorType& allocator = doc.GetAllocator();

    HelloRequestJsonEncode(helloRequest, json, allocator);

    JsonWriter::Writer(json, data);
}

void HelloRequestJsonEncode(const HelloRequest& helloRequest, rapidjson::Value& json, rapidjson::Document::AllocatorType& allocator){


    if (helloRequest.is_name_exist()) {
        rapidjson::Value name_value;
        JsonWriter::ToValue(helloRequest.name, allocator, name_value);
        json.AddMember(SF_NAME, name_value, allocator);

    }
}

//// HelloRequest Model Definition End

//// Token Model Method Definition

Token BuildToken() {
    Token token_model;
    token_model.token_id_exist = false;
    token_model.token_u_r_i_exist = false;
    token_model.amount_exist = false;
    return token_model;
}

void TokenJsonDecode(const std::string& data, Token& token){

    rapidjson::Value root;
	JsonReader::ParseObject(data, root);

	auto object = root.GetObject();

    TokenJsonDecode(object, token);
}

void TokenJsonDecode(const rapidjson::Value::Object& object, Token& token){
        Validator::RequiredFieldCheck(object, SF_TOKEN_ID);
	    JsonReader::GetUint64(object, SF_TOKEN_ID, token.token_id);

        Validator::RequiredFieldCheck(object, SF_TOKEN_U_R_I);
	    JsonReader::GetString(object, SF_TOKEN_U_R_I, token.token_u_r_i);

        Validator::RequiredFieldCheck(object, SF_AMOUNT);
	    JsonReader::GetUint64(object, SF_AMOUNT, token.amount);

}

void TokenJsonEncode(const Token& token, std::string& data){

    rapidjson::Value json(rapidjson::kObjectType);

    static rapidjson::Document doc;
	rapidjson::Document::AllocatorType& allocator = doc.GetAllocator();

    TokenJsonEncode(token, json, allocator);

    JsonWriter::Writer(json, data);
}

void TokenJsonEncode(const Token& token, rapidjson::Value& json, rapidjson::Document::AllocatorType& allocator){


    if (token.is_token_id_exist()) {
        rapidjson::Value token_id_value;
        JsonWriter::ToValue(token.token_id, token_id_value);
        json.AddMember(SF_TOKEN_ID, token_id_value, allocator);

    }

    if (token.is_token_u_r_i_exist()) {
        rapidjson::Value token_u_r_i_value;
        JsonWriter::ToValue(token.token_u_r_i, allocator, token_u_r_i_value);
        json.AddMember(SF_TOKEN_U_R_I, token_u_r_i_value, allocator);

    }

    if (token.is_amount_exist()) {
        rapidjson::Value amount_value;
        JsonWriter::ToValue(token.amount, amount_value);
        json.AddMember(SF_AMOUNT, amount_value, allocator);

    }
}

//// Token Model Definition End

//// HelloResponse Model Method Definition

HelloResponse BuildHelloResponse() {
    HelloResponse hello_response_model;
    hello_response_model.greeting_exist = false;
    return hello_response_model;
}

void HelloResponseJsonDecode(const std::string& data, HelloResponse& helloResponse){

    rapidjson::Value root;
	JsonReader::ParseObject(data, root);

	auto object = root.GetObject();

    HelloResponseJsonDecode(object, helloResponse);
}

void HelloResponseJsonDecode(const rapidjson::Value::Object& object, HelloResponse& helloResponse){
        Validator::RequiredFieldCheck(object, SF_GREETING);
	    JsonReader::GetString(object, SF_GREETING, helloResponse.greeting);

}

void HelloResponseJsonEncode(const HelloResponse& helloResponse, std::string& data){

    rapidjson::Value json(rapidjson::kObjectType);

    static rapidjson::Document doc;
	rapidjson::Document::AllocatorType& allocator = doc.GetAllocator();

    HelloResponseJsonEncode(helloResponse, json, allocator);

    JsonWriter::Writer(json, data);
}

void HelloResponseJsonEncode(const HelloResponse& helloResponse, rapidjson::Value& json, rapidjson::Document::AllocatorType& allocator){


    if (helloResponse.is_greeting_exist()) {
        rapidjson::Value greeting_value;
        JsonWriter::ToValue(helloResponse.greeting, allocator, greeting_value);
        json.AddMember(SF_GREETING, greeting_value, allocator);

    }
}

//// HelloResponse Model Definition End


} // namespace base
} // namespace planet

#endif //CDL_PLANET_MODEL_H